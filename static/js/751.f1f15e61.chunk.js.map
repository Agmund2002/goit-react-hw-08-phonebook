{"version":3,"file":"static/js/751.f1f15e61.chunk.js","mappings":"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","sources":["components/individualElements/Title.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MainTitle = styled.h1`\n  margin-bottom: ${p => p.theme.spacing(7)};\n`;\n\nexport const SecondaryTitle = styled.h2`\n  margin-bottom: ${p => p.theme.spacing(5)};\n`;\n\nexport const Message = styled.p`\n  font-size: 18px;\n  color: ${p => p.theme.colors.negative};\n`;\n","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { IoMdEye } from 'react-icons/io';\nimport { IoMdEyeOff } from 'react-icons/io';\n\nconst passwordRegExp = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?!.* ).{8,20}$/;\n\nconst schema = Yup.object().shape({\n  username: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email value').required('Required'),\n  password: Yup.string()\n    .min(8, 'Min 8 symbols')\n    .max(20, 'Max 20 symbols')\n    .matches(\n      passwordRegExp,\n      'The password must contain at least one uppercase letter and a number'\n    )\n    .required('Required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        console.log(values);\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <label>\n          Username\n          <Field\n            name=\"username\"\n            autoComplete=\"username\"\n            placeholder=\"John Doe\"\n          />\n          <ErrorMessage component=\"span\" name=\"username\" />\n        </label>\n\n        <label>\n          Email\n          <Field\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            placeholder=\"example@email.com\"\n          />\n          <ErrorMessage component=\"span\" name=\"email\" />\n        </label>\n\n        <label>\n          Password\n          <Field\n            name=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            autoComplete=\"off\"\n          />\n          <button type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? <IoMdEye /> : <IoMdEyeOff />}\n          </button>\n          <ErrorMessage component=\"span\" name=\"password\" />\n        </label>\n\n        <label>\n          Confirm password\n          <Field\n            name=\"confirmPassword\"\n            type={showPassword ? 'text' : 'password'}\n            autoComplete=\"off\"\n          />\n          <button type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? <IoMdEye /> : <IoMdEyeOff />}\n          </button>\n          <ErrorMessage component=\"span\" name=\"confirmPassword\" />\n        </label>\n\n        <button type=\"submit\">Register</button>\n      </Form>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { SecondaryTitle } from 'components/individualElements/Title.styled';\n\nconst RegisterPage = () => {\n  return (\n    <section>\n      <SecondaryTitle>Register</SecondaryTitle>\n      <RegisterForm />\n    </section>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["MainTitle","styled","_templateObject","_taggedTemplateLiteral","p","theme","spacing","SecondaryTitle","_templateObject2","Message","_templateObject3","colors","negative","schema","Yup","shape","username","required","email","password","min","max","matches","confirmPassword","oneOf","RegisterForm","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","console","log","resetForm","children","_jsxs","Form","Field","name","autoComplete","placeholder","ErrorMessage","component","type","onClick","IoMdEye","IoMdEyeOff"],"sourceRoot":""}