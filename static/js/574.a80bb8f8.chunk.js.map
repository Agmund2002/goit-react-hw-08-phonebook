{"version":3,"file":"static/js/574.a80bb8f8.chunk.js","mappings":"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","sources":["components/Container/Container.styled.js","components/Container/Container.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerStyled = styled.div`\n  & {\n    /*Basic styles*/\n    min-width: 320px;\n    max-width: 375px;\n    margin: 0 auto;\n  }\n\n  /*Tablet styles*/\n  @media only screen and (min-width: 768px) {\n    & {\n      max-width: 768px;\n    }\n  }\n\n  /*Desktop styles*/\n  @media only screen and (min-width: 1280px) {\n    & {\n      max-width: 1280px;\n    }\n  }\n`;\n","import { ContainerStyled } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <ContainerStyled>{children}</ContainerStyled>;\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ModernForm = styled(Form)`\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: ${p => p.theme.spacing(5)};\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: ${p => p.theme.spacing(2)};\n\n  width: 300px;\n  font-weight: 500;\n`;\n\nexport const ModernField = styled(Field)`\n  width: 100%;\n  font-size: 16px;\n  border: 1px solid ${p => p.theme.colors.mainBorder};\n  padding: ${p => p.theme.spacing(1)} ${p => p.theme.spacing(3)};\n  border-radius: 5px;\n\n  &.password {\n    padding-right: ${p => p.theme.spacing(7)};\n  }\n`;\n\nexport const ModernErrorMessage = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.error};\n  font-size: 16px;\n`;\n\nexport const PassBox = styled.div`\n  position: relative;\n`;\n\nexport const ShowPassBtn = styled.button`\n  position: absolute;\n  bottom: 2px;\n  right: 6px;\n\n  cursor: pointer;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { IoMdEye } from 'react-icons/io';\nimport { IoMdEyeOff } from 'react-icons/io';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  Label,\n  ModernErrorMessage,\n  ModernField,\n  ModernForm,\n  PassBox,\n  ShowPassBtn,\n} from './RegisterForm.styled';\n\nconst passwordRegExp = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?!.* ).{8,20}$/;\n\nconst schema = Yup.object().shape({\n  username: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email value').required('Required'),\n  password: Yup.string()\n    .min(8, 'Min 8 symbols')\n    .max(20, 'Max 20 symbols')\n    .matches(\n      passwordRegExp,\n      'The password must contain at least one uppercase letter and a number'\n    )\n    .required('Required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n      }}\n      validationSchema={schema}\n      onSubmit={(values, actions) => {\n        const { username, email, password } = values;\n        dispatch(\n          register({\n            name: username,\n            email,\n            password,\n          })\n        );\n        actions.resetForm();\n      }}\n    >\n      <ModernForm>\n        <Label>\n          Username\n          <ModernField\n            name=\"username\"\n            type=\"text\"\n            autoComplete=\"username\"\n            placeholder=\"John Doe\"\n          />\n          <ModernErrorMessage component=\"span\" name=\"username\" />\n        </Label>\n\n        <Label>\n          Email\n          <ModernField\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            placeholder=\"example@email.com\"\n          />\n          <ModernErrorMessage component=\"span\" name=\"email\" />\n        </Label>\n\n        <Label>\n          Password\n          <PassBox>\n            <ModernField\n              className=\"password\"\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              autoComplete=\"off\"\n            />\n            <ShowPassBtn\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? (\n                <IoMdEyeOff color=\"rgba(153,153,153,0.8)\" />\n              ) : (\n                <IoMdEye color=\"rgba(153,153,153,0.8)\" />\n              )}\n            </ShowPassBtn>\n          </PassBox>\n          <ModernErrorMessage component=\"span\" name=\"password\" />\n        </Label>\n\n        <Label>\n          Confirm password\n          <PassBox>\n            <ModernField\n              className=\"password\"\n              name=\"confirmPassword\"\n              type={showPassword ? 'text' : 'password'}\n              autoComplete=\"off\"\n            />\n            <ShowPassBtn\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? (\n                <IoMdEyeOff color=\"rgba(153,153,153,0.8)\" />\n              ) : (\n                <IoMdEye color=\"rgba(153,153,153,0.8)\" />\n              )}\n            </ShowPassBtn>\n          </PassBox>\n          <ModernErrorMessage component=\"span\" name=\"confirmPassword\" />\n        </Label>\n\n        <button className=\"button\" type=\"submit\">\n          Register\n        </button>\n      </ModernForm>\n    </Formik>\n  );\n};\n","import { Container } from 'components/Container/Container';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { SecondaryTitle } from 'components/individualElements/Title';\nimport { useSelector } from 'react-redux';\nimport { BarLoader } from 'react-spinners';\nimport { selectIsLoading } from 'redux/auth/selectors';\n\nconst RegisterPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n\n  return isLoading ? (<BarLoader />) : (\n    <section>\n      <Container>\n        <SecondaryTitle isVisible={false}>Register</SecondaryTitle>\n        <RegisterForm />\n      </Container>\n    </section>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["ContainerStyled","styled","_templateObject","_taggedTemplateLiteral","Container","_ref","children","_jsx","ModernForm","Form","p","theme","spacing","Label","_templateObject2","ModernField","Field","_templateObject3","colors","mainBorder","ModernErrorMessage","ErrorMessage","_templateObject4","error","PassBox","_templateObject5","ShowPassBtn","_templateObject6","schema","Yup","shape","username","required","email","password","min","max","matches","confirmPassword","oneOf","RegisterForm","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","Formik","initialValues","validationSchema","onSubmit","values","actions","register","name","resetForm","_jsxs","type","autoComplete","placeholder","component","className","onClick","IoMdEyeOff","color","IoMdEye","useSelector","selectIsLoading","BarLoader","SecondaryTitle","isVisible"],"sourceRoot":""}